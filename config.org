* Init
** Setup path

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp/")
(setq exec-path (append exec-path '("/usr/local/bin")))
(setq exec-path (append exec-path '("~/bin/") ))
(setq default-directory "~/")
#+END_SRC

** Setup packages

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
;;                         ("marmalade" . "https://marmalade-repo.org/packages/")
))

#+END_SRC

** Dependencies
#+BEGIN_SRC emacs-lisp
(defvar my-packages
'(use-package
))
;;      alert flymake-python-pyflakes cnfonts ivy-yasnippet company-lsp use-package wgrep add-node-modules-path org-mode fic-mode bing-dict exec-path-from-shell ibuffer-vc expand-region easy-kill smartparens-config indent-tools chinese-fonts-setup web-mode swiper rainbow-delimiters pyvenv-mode pyvenv-mode-auto pipenv projectile magit easy-hugo guide-key ivy counsel counsel-projectile ivy-rich avy auto-virtualenv ace-window)

(dolist (p my-packages)
  (unless (package-installed-p p)
    (package-refresh-contents)
    (package-install p))
  (add-to-list 'package-selected-packages p))

#+END_SRC
* Misc
** Startup window size
#+BEGIN_SRC emacs-lisp
(defun wd-set-window-pos2 (&optional main-screen-width &optional main-screen-height)
   "Set emacs window at proper position"
   (unless main-screen-height (setq main-screen-height 900))
   (unless main-screen-width (setq main-screen-width 1440))
   (let ((display-height (x-display-pixel-height))
         (display-width (x-display-pixel-width))
         (margin-left 300)
         (margin-top 0))
     (if (or (> display-width main-screen-width)
             (> display-height main-screen-height))
         (modify-frame-parameters (selected-frame) (list (cons 'left  (+ margin-left)) (cons 'top  (+ -1080))))
       (modify-frame-parameters (selected-frame) (list (cons 'left (+ margin-left)) (cons 'top (+ 0))))
       )
     (set-frame-size (selected-frame) 120 50))
   )


(defun wd-set-window-pos (&optional main-screen-width &optional main-screen-height)
   "Set emacs window at proper position"
   (unless main-screen-height (setq main-screen-height 900))
   (unless main-screen-width (setq main-screen-width 1440))
   (let ((display-height (x-display-pixel-height))
         (display-width (x-display-pixel-width))
         (margin-left 300)
         (margin-top 0))
     (if (or (> display-width main-screen-width)
             (> display-height main-screen-height))
         (progn
           (setq margin-top -900))
       )
     (message "left %s, top %s" margin-left margin-top)
     (modify-frame-parameters (selected-frame) '((left . (+ margin-left)) (top . (+ margin-top))))
     (set-frame-size (selected-frame) 120 50))
   )

(defun wd-fullscreen ()
  (interactive)
  (set-frame-parameter nil 'fullscreen 'fullscreen)
)

(defun wd-halfscreen ()
  (interactive)
  (setq half-display-height (/ (x-display-pixel-height) 2)
        half-display-width (/ (x-display-pixel-width) 2))
  
  (setq margin-left (/ half-display-width 4)
        margin-top (/ half-display-height 4))

  ;; (setq initial-frame-alist
  ;;       '(
  ;;         (width . half-display-width)
  ;;         (height . half-display-height)
  ;;         (left . 50)
  ;;         (top . 50)))
  ;; (setq default-frame-alist
  ;;       '(
  ;;         (width . half-display-width)
  ;;         (height . half-display-height)
  ;;         (left . 50)
  ;;         (top . 50))))

  (set-frame-size (selected-frame) 200 50)
  (set-frame-position (selected-frame) margin-left margin-top)
)

(when (window-system)
  ;; (setq wd-my-main-screen-width 1440) ;; You can use (x-display-pixel-height) to get this value
  ;; (setq wd-my-main-screen-height 900)
  ;; (wd-set-window-pos2
  ;;  wd-my-main-screen-width
  ;;  wd-my-main-screen-height)
  ;;(frame-parameters)

  ;; emacs-mac has three behaviors: fullboth, fullscreen, and maximized.
  ;; fullboth means "old-style fullscreen, just covering the entire normal desktop",
  ;; and fullscreen means "use native fullscreen support", similar to what fullboth means in the GNU ns frontend.
  ;;(set-frame-parameter nil 'fullscreen 'fullscreen)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (wd-halfscreen)
  )
#+END_SRC

** Misc settings
#+BEGIN_SRC emacs-lisp
;;
;; misc settings
;; 
(mouse-wheel-mode 1)
;; 不弹出图形界面的确认窗口
(setq use-dialog-box nil)

(global-auto-revert-mode 1)

;;
;; for mac only
;; 
(when (eq system-type 'darwin) ;; mac specific settings
  (setq mac-option-modifier 'meta)
  (setq mac-command-modifier 'meta)
  (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
)


;; 和x公用剪贴板
(setq x-select-enable-clipboard t)
;; (setq x-select-enable-primary t)

;;'y' for 'yes', 'n' for 'no'
(fset 'yes-or-no-p 'y-or-n-p)

;;禁用启动信息
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
;; 显示列号
(setq column-number-mode t) 

;; 防止页面滚动时跳动， scroll-margin 3 可以在靠近屏幕边沿3行时就开始滚动，可以很好的看到上下文。
;; (setq scroll-margin 3
;;       scroll-conservatively 2)

;;关闭烦人的出错时的提示声
;;(setq visible-bell t)

;;把title设置为“文件名@LC's Emacs"
(setq frame-title-format
        '("GNU Emacs - [ "(buffer-file-name "%f \]"
                (dired-directory dired-directory "%b \]"))))

;; 语法高亮
(global-font-lock-mode t)


;; 个人信息
(setq user-full-name "Wang Dong")
(setq user-mail-address "wd@wdicc.com")

;;光标靠近鼠标的时候，让鼠标自动让开，别挡住视线
(mouse-avoidance-mode 'animate)

;; 翻页后再回来的时候，光标到原来的位置
(setq scroll-preserve-screen-position t)

;;下面的这个设置可以让光标指到某个括号的时候显示与它匹配的括号
(show-paren-mode t)
;; (setq show-paren-style 'parentheses)
(setq show-paren-style 'expression)

;;设置缺省模式是text，而不是基本模式
(setq default-major-mode 'text-mode)
;; (setq fill-column 80)
;; (setq-default fill-column 80)
;; (setq longlines-show-hard-newlines t)
;; (setq longlines-auto-wrap t)
;; (add-hook 'text-mode-hook 'longlines-mode)
;; (add-hook 'text-mode-hook 'turn-on-auto-fill)

;; 打开文件的时候定位到上次的位置
(save-place-mode 1)

;; 所有的备份文件转移到~/backups目录下
(setq auto-save-default nil)
(setq make-backup-files t)
(setq backup-by-copying t)
(setq version-control t)
(setq kept-old-versions 2)
(setq kept-new-versions 5)
(setq delete-old-versions t)
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
;; Emacs 中，改变文件时，默认都会产生备份文件(以 ~ 结尾的文件)。可以完全去掉
;; (并不可取)，也可以制定备份的方式。这里采用的是，把所有的文件备份都放在一
;; 个固定的地方("~/var/tmp")。对于每个备份文件，保留最原始的两个版本和最新的
;; 五个版本。并且备份的时候，备份文件是复本，而不是原件。

;;不产生备份文件
;(setq make-backup-files nil)

;;设置kill-ring-max(我不知道怎么翻译这个词：)为200，以防不测：）
(setq kill-ring-max 200)

;; 设置mark， C-x <SPC>
(global-set-key (kbd "C-t") 'set-mark-command)

;; Make Emacs UTF-8 compatible for both display and editing:
(prefer-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

;; 打开 quick-calc
;; (global-set-key (kbd "M-#") 'quick-calc)

;; 高量当前行 // 会造成滚动的时候抖动，不是很爽。。
;; (require 'hl-line)
;; (global-hl-line-mode 1)

;; 查找打开当前光标所在的文件
(global-set-key (kbd "C-x f") 'find-file-at-point)

;;
;; indent
;;
;; 不用 TAB 字符来indent
(setq-default indent-tabs-mode nil)
;;设置tab为4个空格的宽度，而不是原来的2
(setq-default tab-width 4)
(setq tab-width 4)
(setq tab-stop-list ())
(cl-loop for x downfrom 40 to 1 do
           (setq tab-stop-list (cons (* x 4) tab-stop-list)))
(add-hook 'html-mode-hook
              (lambda ()
                (setq indent-line-function 'indent-relative)))
(add-hook 'php-mode-hook
              (lambda ()
                (setq php-mode-force-pear 1)
                (setq c-basic-offset 4)
            ))
;; auto indent
;; (setq indent-line-function 'indent-relative-maybe)
;; (global-set-key (kbd "RET") 'align-newline-and-indent)

;;
;; lisp
;;
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)

;; 
;; narrowing
;; 
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)

;;
;; register key binding
;;
(define-prefix-command 'ctl-x-r-map-alias)
(global-set-key (kbd "<f6>") 'ctl-x-r-map-alias)
;; (define-key ctl-x-r-map-alias "\C-@" 'point-to-register)
;; (define-key ctl-x-r-map-alias [?\C-\ ] 'point-to-register)
;; (define-key ctl-x-r-map-alias " " 'point-to-register)
(define-key ctl-x-r-map-alias "j" 'jump-to-register)
;; (define-key ctl-x-r-map-alias "s" 'copy-to-register)
;; (define-key ctl-x-r-map-alias "x" 'copy-to-register)
;; (define-key ctl-x-r-map-alias "i" 'insert-register)
;; (define-key ctl-x-r-map-alias "g" 'insert-register)
;; (define-key ctl-x-r-map-alias "r" 'copy-rectangle-to-register)
;; (define-key ctl-x-r-map-alias "n" 'number-to-register)
;; (define-key ctl-x-r-map-alias "+" 'increment-register)
(define-key ctl-x-r-map-alias "w" 'window-configuration-to-register)
;; (define-key ctl-x-r-map-alias "f" 'frame-configuration-to-register)


(defun back-to-indentation-or-beginning (arg)
  "combine two function into one call."
  (interactive "^p")
  (if (bolp)
      (back-to-indentation)
    (move-beginning-of-line arg)))
(define-key global-map (kbd "C-a") 'back-to-indentation-or-beginning)

;; proxy
 (setq url-proxy-services
       '(("no_proxy" . "^\\(127.0.0.1\\|localhost\\|10.*\\)")
         ("http" . "127.0.0.1:6152")
         ("https" . "127.0.0.1:6152")))


;; unset C- and M- digit keys
(dotimes (n 10)
  (global-unset-key (kbd (format "C-%d" n)))
  (global-unset-key (kbd (format "M-%d" n)))
  )

;; ;; set up my own map
;; (define-prefix-command 'bjm-map)
;; (global-set-key (kbd "C-1") 'bjm-map)
;; (define-key bjm-map (kbd "m") 'mu4e)
;; (define-key bjm-map (kbd "g") 'bjm/open-gcal-agenda)

;; org-mode
(setq org-startup-truncated nil)

;; spell
(setq ispell-program-name "aspell")
#+END_SRC

* Elpa
** Misc
#+BEGIN_SRC emacs-lisp
(require 'use-package)

;; 让 shell  变量起作用
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
  )

(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :config
  (load-theme 'sanityinc-tomorrow-eighties t)
  (custom-set-variables
   '(custom-enabled-themes (quote (sanityinc-tomorrow-eighties))))
  )

(use-package cnfonts
  :ensure t
  :config
  (custom-set-variables
  '(cfs--current-profile "profile1" t)
  '(cfs--profiles-steps (quote (("profile1" . 4))) t))
  (cnfonts-enable)
  )

    ;; clipboard
  (use-package osx-clipboard
    :ensure t
    :config
    (osx-clipboard-mode +1)
    )


(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'post-forward)
  (setq uniquify-separator ":")
)

(use-package whitespace
  :ensure t
  :config
  (setq whitespace-style '(trailing tabs))
  (global-whitespace-mode)
)
#+END_SRC

** org-mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind (("C-c t" . org-capture)
         ("C-c a" . org-agenda))
  :config

  ;; support org-protocol to capture in browser
  (server-start)
  (require 'org-protocol)

  ;; (setq org-archive-location "::* Archived Tasks")
  (use-package alert
    :ensure t
    :config
    (setq alert-default-style 'fringe)
    (setq alert-fade-time 20)
    )

  (use-package org-alert
    ;; :ensure t
    :init
    (if (not (featurep 'cl))
    (require 'cl))
    :config
    ;; (setq alert-default-style 'notifier)
    (setq org-alert-alert-before 30)
    (org-alert-enable)
    )

  (setq org-archive-location "archive.org::* From %s")
  (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/tasks.org" "Tasks")
         "* TODO %?\n%U")
        ("l" "Todo with link" entry (file+headline "~/org/tasks.org" "Links")
         "* TODO %?[[%:link][%:description]] %U\n" :prepend t)
        ("L" "Capture a link from browser" entry (file+headline "~/org/inbox.org" "Links")
         "* TODO [[%:link][%:description]]\n%u\n\n%:initial"
         :empty-lines 1)
        ))
  (setq org-agenda-files '("~/org"))
  (setq org-log-done 'note)

  ;; open inbox.org when start emacs
  ;; (find-file "~/org/inbox.org")
  )
#+END_SRC

** Yasnippet
   
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure react-snippets
    :config
    (yas-global-mode 1)
    )
#+END_SRC
 
** highlight-symbol
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :bind (("C-c h h" . highlight-symbol-at-point)
           ("C-c h H" . highlight-symbol-remove-all))
    )
#+END_SRC

** web-mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.ejs\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))

    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-css-indent-offset 4)
    (setq web-mode-code-indent-offset 4)
    (setq web-mode-enable-auto-indentation nil)

    (setq web-mode-engines-alist
          '(("angular" . "task.*/.*\\.html\\'"))
          )

    (setq web-mode-content-types-alist
          '(("jsx" . "GeneralAviationForUser/.*/.*\\.js\\'")
            ("jsx" . "GeneralAviationForManager/.*/.*\\.js\\'")
            ("jsx" . "Daphne/.*\\.js\\'")
            ("jsx" . "Coco/.*\\.js\\'"))
          )

    (add-hook 'web-mode-hook
              #'(lambda ()
                                          ;(yas-activate-extra-mode 'nxml-mode)
                  (add-to-list 'web-mode-engine-attr-regexps '("angular" . "ng-"))
                  (set-face-attribute 'web-mode-html-attr-engine-face nil :foreground "steel blue")
                  ))

    (defun my-web-mode-hook ()
      (setq web-mode-enable-auto-pairing nil)
      )

    (add-hook 'web-mode-hook  'my-web-mode-hook)
  )

  (use-package markdown-mode
    :ensure t
    :config
    (set-face-attribute 'markdown-list-face nil
                        :foreground "gold"
                        )
  )
#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    )

  (use-package counsel-projectile
    :ensure t
    )
#+END_SRC

** tramp

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :config
    (setq tramp-ssh-controlmaster-options
          "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")
    (add-to-list 'tramp-connection-properties
                 (list (regexp-quote "10.10.8.1") "remote-shell" "sh"))
    )
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
(use-package forge
  :ensure t
  :after magit)
  
  (use-package magit
    :ensure t
    :bind* ("C-x g" . magit-status)
    :config
    (setq magit-auto-revert-mode nil)
    (setq magit-last-seen-setup-instructions "1.4.0")
    )
#+END_SRC

** lua-mode
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
    :config
    (setq lua-indent-level 4)
    )
#+END_SRC

** smartparens & ace-window & easy-kill & expand-region

#+BEGIN_SRC emacs-lisp
  ;; smartparens
  (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    (defun sp-web-mode-is-code-context (id action context)
    (and (eq action 'insert)
         (not (or (get-text-property (point) 'part-side)
                  (get-text-property (point) 'block-side)))))

    (sp-local-pair 'web-mode "<" nil :when '(sp-web-mode-is-code-context))
    (smartparens-global-mode)
    ;;(show-smartparens-global-mode +1)
  )


  (use-package ace-window
    :ensure t
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    ;; (setq aw-ignore-current t)
    (global-set-key (kbd "C-M-h") #'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t
         (:height 10.0 :foreground "gold")
         ))
       ))
    )


  (use-package easy-kill
    :ensure t
    :config
    (global-set-key [remap kill-ring-save] 'easy-kill)
    ;; (global-set-key [remap mark-sexp] 'easy-mark)
    )

  (use-package expand-region
    :ensure t
    :bind ("M-m" . er/expand-region)
    )
#+END_SRC

** company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (setq company-minimum-prefix-length 2)
    ;; (setq company-dabbrev-ignore-case t)
    ;; (setq company-idle-delay t)
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "C-s") #'company-filter-candidates)

    (require 'company-my-backend)

    (add-hook 'web-mode-hook
              (lambda ()
                (set (make-local-variable 'company-backends)
                     '(
                        company-tide
                        company-react
                        ;; company-dabbrev-code
                        ;; company-keywords
                        company-files
                        company-yasnippet))))

    ;; (add-to-list 'company-backends '(company-yasnippet
    ;;                                   company-files
    ;;                                   company-dabbrev-code
    ;;                                   company-keywords
    ;;                                   ))

    (global-set-key (kbd "C-c y") 'company-yasnippet)

    ;; (add-hook 'python-mode-hook
    ;;           (lambda ()
    ;;             (add-to-list 'company-backends 'company-yasnippet)
    ;;             ))

    (use-package company-terraform
    :ensure t
    :config
    (company-terraform-init)
    )

    )
#+END_SRC

** ivy swiper
#+BEGIN_SRC emacs-lisp
  (defun my-ivy-yank-word ()
    (interactive)
    (let (amend)
      (with-selected-window (ivy-state-window ivy-last)
        (goto-char swiper--opoint)
        (setq amend (thing-at-point 'symbol)))
      (when amend (insert amend))))

  (use-package counsel
    :ensure t
    :bind (("C-c i" . counsel-projectile-ag)
           ("M-x" . counsel-M-x)
           ("C-c f" . counsel-projectile-find-file)
           ("M-X" . ivy-switch-buffer)
           ("C-c v" . counsel-imenu)
           )
    :init
    (setq recentf-max-saved-items 200)
    ;; (setq ivy-virtual-abbreviate 'full)
    :config
    (use-package wgrep :ensure t)
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t ; treat recentf, bookmarks as virtual buffers.
          ivy-height 10
          ivy-display-style 'fancy
          ivy-virtual-abbreviate 'full
          ivy-count-format "(%d/%d) "
          ivy-initial-inputs-alist nil ; remove initial ^ input.
          ivy-extra-directories nil ; remove . and .. directory.
          ivy-wrap nil
          )
  
    (set-variable 'ivy-on-del-error-function '(lambda()))

    ;; (ivy-add-actions
    ;;  'counsel-find-file
    ;;  '(("g" counsel-find-file-ag-action "grep")))
    )

  (use-package ivy-rich
    :ensure t
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config
    (ivy-rich-mode 1)
  )

  (use-package swiper
    :after ivy
    :ensure t
    :bind (("C-s" . swiper-isearch)
           :map swiper-map
           ("M-q" . swiper-query-replace)
           ("C-w" . my-ivy-yank-word)
           ("C-'" . swiper-avy)
           )
    )

  ;; "M-q" swiper-query-replace
  ;; "C-l" swiper-recenter-top-bottom
  ;; "C-'" swiper-avy
  ;; "C-7" swiper-mc
  ;; "C-c C-f" swiper-toggle-face-matching

  ;; avy
  (use-package avy
    :ensure t
    :bind (("M-s" . avy-goto-char-timer)
           ("C-." . avy-pop-mark))
    )
#+END_SRC
   
** perl-mode
#+BEGIN_SRC emacs-lisp
  (defalias 'perl-mode 'cperl-mode)

  (use-package cperl-mode
    :mode "\\.[pP][Llm]\\'"
    :interpreter (("perl" . cperl-mode)
                  ("perl5" . cperl-mode))
    :config
    (setq cperl-electric-keywords nil)
    (setq cperl-electric-parens nil)
    (define-key cperl-mode-map "{" 'nil)

    ;; (global-set-key (kbd "C-;") 'comment-dwim)
    (add-hook 'cperl-mode-hook (lambda () (abbrev-mode -1)))

    (setq cperl-indent-level 4
          cperl-close-paren-offset -4
          cperl-continued-statement-offset 4
          cperl-indent-parens-as-block t
          cperl-tab-always-indent t
          cperl-highlight-variables-indiscriminately t
          )
    )
#+END_SRC

** guide-key & rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :ensure t
    :config
    (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c" "<SPC>"))
    (setq guide-key/recursive-key-sequence-flag t)
    (setq guide-key/popup-window-position :bottom)
    (guide-key-mode 1)
    )

  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
    )
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :mode "\\.py\\'"
    :interpreter (("python" . python-mode)
                  ("python3" . python-mode)
                  )
    )

  (use-package add-node-modules-path
    :ensure t
  )

  (use-package flycheck
    :ensure t
    :init
    (eval-after-load 'web-mode
      '(add-hook 'web-mode-hook #'add-node-modules-path))
    :config
    (global-flycheck-mode t)
    (setq-default flycheck-disabled-checkers '(emacs-lisp emacs-lisp-checkdoc tsx-tide))

    (flycheck-add-mode 'javascript-eslint 'web-mode)
  )


  (use-package highlight-indentation
    :ensure t
    :config
    (add-hook 'python-mode-hook 'highlight-indentation-mode)
    )


  ;;; hightlight-tail
  ;; (use-package highlight-tail
  ;;   :ensure t
  ;;   :config
  ;;   ;; (setq highlight-tail-colors 
  ;;   ;;       '(("balck" . 0)
  ;;   ;;         ("white" . 25)
  ;;   ;;         ))

  ;;   (setq highlight-tail-colors '(("black" . 0)
  ;;                               ("#bc2525" . 25)
  ;;                               ("black" . 100)))
  ;;   (highlight-tail-mode)
  ;;   )

  ;;; indent-tools
  (use-package indent-tools
    :ensure t
    ;; :init
    ;; (add-hook 'python-mode-hook
    ;;           (lambda () (define-key python-mode-map (kbd "C-c i") 'indent-tools-hydra/body))
    ;;           )
    )
#+END_SRC
** ibuffer
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure ibuffer-vc
    :config
    (add-hook 'ibuffer-hook
      (lambda ()

        (face-remap-add-relative 'default 'font-lock-comment-face)
        (copy-face 'font-lock-keyword-face 'tempface )
        (setq ibuffer-filter-group-name-face 'tempface)
        (face-remap-add-relative ibuffer-filter-group-name-face font-lock-doc-face)
        (ibuffer-vc-set-filter-groups-by-vc-root)
        (unless (eq ibuffer-sorting-mode 'alphabetic)
          (ibuffer-do-sort-by-alphabetic))))

    (defconst gcs-ibuffer-fontification-alist
      '((ruby-mode . font-lock-string-face)
        (sh-mode . font-lock-string-face)
        (objc-mode . font-lock-constant-face)
        (c-mode . font-lock-constant-face)
        (java-mode . font-lock-constant-face)
        (emacs-lisp-mode . font-lock-variable-name-face)
        (org-mode . font-lock-negation-char-face)
        (dired-mode . font-lock-function-name-face)
        (term-mode . font-lock-doc-string-face)
        (python-mode . font-lock-variable-name-face)))
  
    (setq ibuffer-fontification-alist
          `(,@(mapcar (lambda (b)
                        `(9999 (eq major-mode ',(car b)) ,(cdr b)))
                      gcs-ibuffer-fontification-alist)
            (90 (string-match "magit" (symbol-name major-mode))
                font-lock-function-name-face)
            (90 (or (string-match "^*" (buffer-name))
                    (memq major-mode ibuffer-help-buffer-modes))
                font-lock-comment-face)))

    (setq ibuffer-formats
        '((mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                (vc-status 16 16 :left)
                " "
                filename-and-process)))
    ;; (define-key ibuffer-mode-map (kbd "C-g") 'quit-window)
    ;; (define-key ibuffer-mode-map (kbd "j") 'ibuffer-forward-line)
    ;; (define-key ibuffer-mode-map (kbd "k") 'ibuffer-backward-line)
    ;; (define-key ibuffer-mode-map (kbd "C-n") 'ibuffer-forward-filter-group)
    ;; (define-key ibuffer-mode-map (kbd "C-p") 'ibuffer-backward-filter-group)
    :bind ("C-x C-b" . ibuffer))
#+END_SRC   

** dict
#+BEGIN_SRC emacs-lisp
  (use-package osx-dictionary
    :ensure t
    :bind ("C-c d" . osx-dictionary-search-pointer)
    )

  (use-package bing-dict
    :ensure t
    :bind ("C-c e" . bing-dict-brief)
    )

  ;; (use-package outline
  ;;   :config
  ;;   (add-hook 'emacs-lisp-mode-hook
  ;;             (lambda ()
  ;;               (setq outline-regexp ";;; \\|(use-package ")
  ;;               (outline-minor-mode)
  ;;               (outline-hide-body)
  ;;               ))
  ;;   :bind ("M-o" . outline-cycle)
  ;;   ;; C-c @ C-a expand all
  ;;   )
#+END_SRC   
** lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp)))

    :config
    (use-package lsp-python-ms
      :ensure t
    )

    (use-package conda
      :ensure t
      :init
      (custom-set-variables
        '(conda-anaconda-home "/usr/local/Caskroom/miniconda/base/"))
      (conda-env-autoactivate-mode t)
    )

    (use-package company-lsp
      :ensure t
      :config
      (add-to-list 'company-backends 'company-lsp)
      )

    (use-package lsp-ivy)
    (use-package lsp-ui
      :ensure t
    )
)
#+END_SRC   
** Misc
#+BEGIN_SRC emacs-lisp
  (use-package fic-mode
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook 'fic-mode)
    (add-hook 'python-mode-hook 'fic-mode)
    )

  (use-package yaml-mode
    :ensure t
    :mode "\\.yml$"
    )


  (use-package easy-hugo
    :init
    (setq easy-hugo-basedir "~/blog/")
    (setq easy-hugo-url "https://wdicc.com")
    (setq easy-hugo-postdir "content/post")
    (setq easy-hugo-previewtime "300")
    (setq easy-hugo-default-ext ".org")
    :bind ("C-c C-e" . easy-hugo)
    )

  (use-package ivy-yasnippet
    :ensure t
    )

  ;;
  ;; erc
  ;;
  (require 'erc-nick-colors)

  (defvar http-proxy-host "localhost"
    "Host address for http proxy")
  (defvar http-proxy-port 6152
    "Host port for http proxy")
  (defun open-http-proxy-stream (name buffer host service &rest parameters)
    "Open network stream via http proxy. Proxy is defined by variables http-proxy-host and http-proxy-port."
    (let ((tmp-process (apply 'open-network-stream name buffer http-proxy-host http-proxy-port parameters)))
      (process-send-string name (format "CONNECT %s:%d HTTP/1.1\n\n" host service))
      tmp-process))
  (setq erc-server-connect-function 'open-http-proxy-stream)

  ;;
  ;; terraform
  ;;
  (use-package terraform-mode
  :ensure t
  :config
  (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode)
  )
#+END_SRC
